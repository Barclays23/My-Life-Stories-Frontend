import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { db, storage } from '../../firebase/firebase';
import { collection, getDocs, addDoc } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { toast } from 'react-toastify';
import LoadingSpinner2 from '../../components/Loading Spinner/LoadingSpinner2';
import './AddStory.css';

const AddStory = () => {
  const navigate = useNavigate();
  const [parts, setParts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    partId: '',
    title: '',
    content: '',
    image: null,
  });
  const [newPart, setNewPart] = useState({ active: false, title: '' });
  const [nextPartNumber, setNextPartNumber] = useState(1);
  const [nextSerialNumber, setNextSerialNumber] = useState(1);

  useEffect(() => {
    const fetchPartsAndNumbers = async () => {
      try {
        // Fetch parts
        const partsSnapshot = await getDocs(collection(db, 'parts'));
        const partList = partsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setParts(partList.sort((a, b) => a.partNumber - b.partNumber));

        // Calculate next part number
        const maxPartNumber = partList.length > 0
          ? Math.max(...partList.map(p => p.partNumber))
          : 0;
        setNextPartNumber(maxPartNumber + 1);

        // Set default serial number (updated later based on partId)
        setNextSerialNumber(1);

        await new Promise(resolve => setTimeout(resolve, 300)); // 300ms delay
      } catch (err) {
        toast.error('Error fetching parts: ' + err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchPartsAndNumbers();
  }, []);

  useEffect(() => {
    const fetchNextSerialNumber = async () => {
      if (formData.partId && !newPart.active) {
        try {
          const storiesSnapshot = await getDocs(collection(db, 'stories'));
          const storiesInPart = storiesSnapshot.docs
            .map(doc => ({ id: doc.id, ...doc.data() }))
            .filter(s => s.partId === parseInt(formData.partId));
          const maxSerialNumber = storiesInPart.length > 0
            ? Math.max(...storiesInPart.map(s => s.serialNumber))
            : 0;
          setNextSerialNumber(maxSerialNumber + 1);
        } catch (err) {
          toast.error('Error fetching serial number: ' + err.message);
        }
      } else if (newPart.active) {
        setNextSerialNumber(1); // New part starts with serial 1
      }
    };
    fetchNextSerialNumber();
  }, [formData.partId, newPart.active]);

  const handleNewPartToggle = () => {
    setNewPart({ active: !newPart.active, title: '' });
    setFormData({ ...formData, partId: '' });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name.startsWith('newPart')) {
      setNewPart({ ...newPart, [name.replace('newPart.', '')]: value });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleImageChange = (e) => {
    if (e.target.files[0]) {
      setFormData({ ...formData, image: e.target.files[0] });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      let partId;

      // Create new part if active
      if (newPart.active) {
        if (!newPart.title) {
          throw new Error('Part title is required');
        }

        await addDoc(collection(db, 'parts'), {
          partNumber: nextPartNumber,
          title: newPart.title,
        });
        partId = nextPartNumber;
      } else {
        partId = parseInt(formData.partId);
      }

      if (!partId) {
        throw new Error('Please select a part or create a new one');
      }

      // Validate title and content
      if (!formData.title || !formData.content) {
        throw new Error('Story title and content are required');
      }

      // Upload image if provided
      let imageURL = '';
      if (formData.image) {
        const imageRef = ref(storage, `story-images/${partId}-${Date.now()}`);
        await uploadBytes(imageRef, formData.image);
        imageURL = await getDownloadURL(imageRef);
      }

      // Add story with autogenerated serialNumber
      await addDoc(collection(db, 'stories'), {
        partId,
        serialNumber: nextSerialNumber,
        title: formData.title,
        content: formData.content,
        imageURL,
      });

      await new Promise(resolve => setTimeout(resolve, 300)); // 300ms delay
      toast.success('Story added successfully!');
      navigate('/stories');
    } catch (err) {
      toast.error(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <LoadingSpinner2 />;
  }

  return (
    <div className="add-story mt-16">
      <div className="container mx-auto py-8">
        <h2 className="text-3xl font-bold mb-6 text-center">Add New Story</h2>
        <form onSubmit={handleSubmit} className="max-w-lg mx-auto">
          <div className="mb-4">
            <label className="block text-text-color mb-1">Select Part</label>
            <div className="flex items-center">
              <select
                name="partId"
                value={formData.partId}
                onChange={handleInputChange}
                className="input flex-1"
                disabled={newPart.active}
              >
                <option value="">Select a part</option>
                {parts.map(part => (
                  <option key={part.id} value={part.partNumber}>
                    Part {part.partNumber}: {part.title}
                  </option>
                ))}
              </select>
              <button
                type="button"
                onClick={handleNewPartToggle}
                className="btn ml-2"
              >
                {newPart.active ? 'Cancel New Part' : 'New Part'}
              </button>
            </div>
          </div>

          {newPart.active && (
            <>
              <div className="mb-4">
                <label className="block text-text-color mb-1">Proposed Part Number</label>
                <input
                  type="text"
                  value={nextPartNumber}
                  className="input read-only"
                  readOnly
                />
              </div>
              <div className="mb-4">
                <label className="block text-text-color mb-1">Part Title</label>
                <input
                  type="text"
                  name="newPart.title"
                  value={newPart.title}
                  onChange={handleInputChange}
                  className="input"
                  lang="ml"
                  required
                />
              </div>
            </>
          )}

          <div className="mb-4">
            <label className="block text-text-color mb-1">Proposed Serial Number</label>
            <input
              type="text"
              value={nextSerialNumber}
              className="input read-only"
              readOnly
            />
          </div>
          <div className="mb-4">
            <label className="block text-text-color mb-1">Story Title</label>
            <input
              type="text"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              className="input"
              lang="ml"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-text-color mb-1">Content</label>
            <textarea
              name="content"
              value={formData.content}
              onChange={handleInputChange}
              className="input h-40"
              lang="ml"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block text-text-color mb-1">Image</label>
            <input
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="input"
            />
            {formData.image && (
              <img
                src={URL.createObjectURL(formData.image)}
                alt="Preview"
                className="mt-2 max-w-xs"
              />
            )}
          </div>
          <button type="submit" className="btn">Add Story</button>
        </form>
      </div>
    </div>
  );
};

export default AddStory;